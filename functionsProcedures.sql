/*
    @Procedural approach
    1. Language support: Supports procedural languages like PL/pgSQL, PL/perl, PL/python, etc.
    2. Complex logic: Allows for complex logic using control structures like loop, conditional, and exception handling
    3. Variable support: Support variable declaration and manipulation within the procedural code
    4. Stored procedures/functions: Provide the ability to create stored procedures or function


    @Non-Procedural approach
    1. Declarative queries: Focused on writing declarative SQL queries to retrieve, insert, update or delete data from the database
    2. Simplicity: Emphasize simplicity by expressing operations in the term of what database needed.
    3. SQL features: Supports SQL functions which are single SQL statements that return a value or a set of values.
    4. Performance: Can be sometimes better performance for simple operations due to the optimization query execution plan generated by the database engine.
*/


SELECT * FROM employees;

-- Functions
CREATE FUNCTION emp_count()
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT count(*) FROM employees;
$$;

SELECT emp_count();


CREATE FUNCTION del_emp(id INTEGER)
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employees.employee_id = id
$$;

SELECT del_emp(1);



-- Procedure
CREATE PROCEDURE remove_emp(emp_id int)
LANGUAGE plpgsql
AS
$$
    BEGIN
        DELETE FROM employees WHERE employees.employee_id = emp_id;
    END
$$;

CALL remove_emp(20);

-- Remove emp with notice
CREATE PROCEDURE remove_emp_with_notice(emp_id int)
LANGUAGE plpgsql
AS
$$
    BEGIN
        DELETE FROM employees WHERE employees.employee_id = emp_id;

        RAISE NOTICE 'Employee deleted successfully!';
    END
$$;

CALL remove_emp_with_notice(19);